# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core


parameters:
- name: STAGING_TAG
  type: string
  default: ' ' # Empty space because the azure does not let us have a optional parameter for now. The code will handle this value if you deploy with an empty space.
  displayName: 'Tag to deploy in staging. Caution: check if the inserted tag is one (major/minor/patch) version higher than the latest tag in master.'

trigger:
  branches:
    include:
    - release/*  
    - hotfix/*
    #- develop
    #- master
    #- feature/*
    #- bugfix/*
    #- requirement/*
    #- improvement/*
  tags:
    include: 
    - '*'

pr:
  branches:
    include:
    - develop
    - master

stages:
- stage: BuildApp
  jobs:        
  - job: CheckVersion
    variables: 
      current_counter: $[counter(variables['Build.SourceBranchName'], 1)]   
    steps:
    - bash: |
        if [[ "$(Build.SourceVersionMessage)" =~ "hotfix/" ]];
        then 
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]true" 
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]hotfix"
        else
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]false"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]release"
        fi
        if [[ "$(Build.SourceBranch)" =~ "/hotfix/" ]] ||
           [[ "$(Build.SourceBranch)" =~ "/release/" ]]; 
        then
            version=`sed 's/v//g' <<< $BUILD_SOURCEBRANCHNAME`
            echo "Generate Preview Release Version"
            echo "Version: $version"
            echo "         $version-preview.$(current_counter)"
            echo "##vso[task.setvariable variable=DeployType;isOutput=true]staging"
            echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
            echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$version"
            echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version-preview.$(current_counter)"
            echo "##vso[build.updatebuildnumber]$version-preview.$(current_counter)"
        elif [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
        then
            version=`sed 's/v//g' <<< $BUILD_SOURCEBRANCHNAME`
            echo "Generate Release Version"
            echo "Version: $version"
            echo "##vso[task.setvariable variable=DeployType;isOutput=true]production"
            echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]false"
            echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
            echo "##vso[task.setvariable variable=SonarMasterWhenTag;isOutput=true]sonar.branch.name=master"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$version"
            echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
            echo "##vso[build.updatebuildnumber]$version"
        else
            echo "Generate Development Version"
            staging_tag=`echo "${{ parameters.STAGING_TAG }}" | xargs`
            if [[ -z "$staging_tag" ]]
            then
              version=`echo "$BUILD_SOURCEVERSIONMESSAGE" | grep -oP '[\[]staging v?\d+.\d+.\d+[\]]' | grep -oP '\d+.\d+.\d+'`
            else
              version=`echo "$staging_tag" | grep -oP '\d+.\d+.\d+'`
            fi
            if [[ -z "$version" ]];
            then
                echo "Version: $(Build.BuildNumber)"
                echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]false"
                echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]false"
                echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.BuildNumber)"
            else
                echo "Version: $version-alpha.$(Build.BuildNumber)"
                echo "Force staging enabled!"
                echo "##vso[task.setvariable variable=DeployType;isOutput=true]staging"
                echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
                echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
                echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$version-alpha.$(Build.BuildNumber)"
                echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version-alpha.$(Build.BuildNumber)"
                echo "##vso[build.updatebuildnumber]$version-alpha.$(Build.BuildNumber)"
            fi
        fi
      displayName: Check Version Number 
      name: CheckVersionTask
    - bash: |
        STAGING_URL="https://dev.azure.com/$(organization)/$(System.TeamProject)/_apis/build/status/$(System.DefinitionId)?branchName=$(CheckVersionTask.PreviousPrefix)/$(Build.BuildNumber)&stageName=DeployStaging"
        STAGING_RESULT=$`curl --silent $STAGING_URL`
        echo "URL: $STAGING_URL" 
        echo "RESULT: $STAGING_RESULT"
        SUCCEEDED=$`echo $STAGING_RESULT | grep -P 'succeeded' -o | head -n 1`
        if [[ "$STAGING_RESULT" =~ "succeeded" ]];
        then
            echo "$PREVIOUS_PREFIX branch is ok!"
        else
            echo "$PREVIOUS_PREFIX branch is not ok!"
            exit 1
        fi
      condition: contains(variables['Build.SourceBranch'], '/tags/')
      displayName: Break if release/hotfix branch is not passing
      name: BreakIsReleaseOrHotfixIsNotPassing
    - bash: env
      displayName: Show environment variables


# name: $(Date:yyyyMMdd)$(Rev:.r)
# variables:
#   var1: value1
# jobs:
# - job: One
#   steps:
#   - script: echo First step!